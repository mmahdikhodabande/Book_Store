// <auto-generated />
using System;
using Book_store.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Book_store.Migrations
{
    [DbContext(typeof(BookStoreContext))]
    partial class BookStoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("Book_store.Models.Author", b =>
                {
                    b.Property<int>("Author_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Author_ID");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Book_store.Models.Book", b =>
                {
                    b.Property<int>("Book_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Author_ID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cover_Image")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PageCount")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Publisher_ID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Book_ID");

                    b.HasIndex("Author_ID");

                    b.HasIndex("Publisher_ID");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Book_store.Models.BookCategory", b =>
                {
                    b.Property<int>("Book_ID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Category_ID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Book_ID");

                    b.HasIndex("Category_ID");

                    b.ToTable("BookCategories");
                });

            modelBuilder.Entity("Book_store.Models.Cart", b =>
                {
                    b.Property<int>("Cart_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("User_ID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Cart_ID");

                    b.HasIndex("User_ID");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Book_store.Models.CartItem", b =>
                {
                    b.Property<int>("CartItem_ID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Book_ID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cart_ID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("CartItem_ID");

                    b.HasIndex("Cart_ID");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("Book_store.Models.Category", b =>
                {
                    b.Property<int>("Catregory_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Catregory_ID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Book_store.Models.Order", b =>
                {
                    b.Property<int>("Order_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("User_ID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Order_ID");

                    b.HasIndex("User_ID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Book_store.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItem_ID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Book_ID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Order_ID")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<string>("Quantity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("OrderItem_ID");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Book_store.Models.Payment", b =>
                {
                    b.Property<int>("Paryment_ID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Order_ID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Paryment_ID");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("Book_store.Models.Publisher", b =>
                {
                    b.Property<int>("Publisher_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Publisher_ID");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("Book_store.Models.Review", b =>
                {
                    b.Property<int>("Review_ID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Book_ID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("User_ID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Review_ID");

                    b.HasIndex("User_ID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Book_store.Models.User", b =>
                {
                    b.Property<int>("User_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RegistratioDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("User_ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Book_store.Models.Book", b =>
                {
                    b.HasOne("Book_store.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("Author_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Book_store.Models.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("Publisher_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Author");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Book_store.Models.BookCategory", b =>
                {
                    b.HasOne("Book_store.Models.Book", "Book")
                        .WithMany("BookCategories")
                        .HasForeignKey("Book_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Book_store.Models.Category", "Category_Book")
                        .WithMany("BookCategories")
                        .HasForeignKey("Category_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Category_Book");
                });

            modelBuilder.Entity("Book_store.Models.Cart", b =>
                {
                    b.HasOne("Book_store.Models.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Book_store.Models.CartItem", b =>
                {
                    b.HasOne("Book_store.Models.Book", "Book")
                        .WithMany("CartItems")
                        .HasForeignKey("CartItem_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Book_store.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("Cart_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("Book_store.Models.Order", b =>
                {
                    b.HasOne("Book_store.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Book_store.Models.OrderItem", b =>
                {
                    b.HasOne("Book_store.Models.Book", "Book")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderItem_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Book_store.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderItem_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Book_store.Models.Payment", b =>
                {
                    b.HasOne("Book_store.Models.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("Book_store.Models.Payment", "Paryment_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Book_store.Models.Review", b =>
                {
                    b.HasOne("Book_store.Models.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("Review_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Book_store.Models.User", "User")
                        .WithMany("reviews")
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Book_store.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Book_store.Models.Book", b =>
                {
                    b.Navigation("BookCategories");

                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Book_store.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("Book_store.Models.Category", b =>
                {
                    b.Navigation("BookCategories");
                });

            modelBuilder.Entity("Book_store.Models.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("Book_store.Models.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Book_store.Models.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");

                    b.Navigation("reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
